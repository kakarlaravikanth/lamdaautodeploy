name: Deploy FastAPI to AWS Lambda

on:
  push:
    branches: [ main, lo ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-asyncio
    
    - name: Run linting
      run: |
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set environment based on branch
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
        fi
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create deployment package
      run: |
        # Create a temporary directory for the deployment package
        mkdir -p deployment_package
        
        # Copy application code
        cp -r app/ deployment_package/
        
        # Install dependencies to the deployment package
        pip install -r requirements.txt -t deployment_package/
        
        # Create zip file
        cd deployment_package
        zip -r ../lambda_deployment.zip . -x "*.pyc" "__pycache__/*"
        cd ..
        
        # Verify the package
        ls -la lambda_deployment.zip
        unzip -l lambda_deployment.zip | head -20
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="project_name=lamdaautodeploy-${{ env.ENVIRONMENT }}" \
          -var="lambda_zip_path=../lambda_deployment.zip"
    
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="project_name=fastapi-serverless-${{ env.ENVIRONMENT }}" \
          -var="lambda_zip_path=../lambda_deployment.zip"
    
    - name: Get API Gateway URL
      run: |
        cd terraform
        API_URL=$(terraform output -raw api_gateway_url)
        echo "API Gateway URL: $API_URL"
        echo "::notice::API Gateway URL: $API_URL"
    
    - name: Test deployment
      run: |
        cd terraform
        API_URL=$(terraform output -raw api_gateway_url)
        sleep 30  # Wait for deployment to propagate
        
        # Test health endpoint
        curl -f "$API_URL/health" || exit 1
        
        # Test root endpoint
        curl -f "$API_URL/" || exit 1
        
        echo "Deployment test successful!"
    
    - name: Clean up
      run: |
        rm -f lambda_deployment.zip
        rm -rf deployment_package